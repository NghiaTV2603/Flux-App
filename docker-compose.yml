services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flux-postgres
    environment:
      POSTGRES_DB: flux_db
      POSTGRES_USER: flux_user
      POSTGRES_PASSWORD: flux_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flux_user -d flux_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: flux-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: flux_user
      MONGO_INITDB_ROOT_PASSWORD: flux_password
      MONGO_INITDB_DATABASE: flux_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flux-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: flux-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: flux_user
      RABBITMQ_DEFAULT_PASS: flux_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: flux-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://flux_user:flux_password@postgres:5432/flux_auth_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://flux_user:flux_password@rabbitmq:5672
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: flux-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://flux_user:flux_password@postgres:5432/flux_user_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://flux_user:flux_password@rabbitmq:5672
      - PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Server Service
  server-service:
    build:
      context: ./services/server-service
      dockerfile: Dockerfile
    container_name: flux-server-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://flux_user:flux_password@postgres:5432/flux_server_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://flux_user:flux_password@rabbitmq:5672
      - PORT=3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Message Service
  message-service:
    build:
      context: ./services/message-service
      dockerfile: Dockerfile
    container_name: flux-message-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://flux_user:flux_password@postgres:5432/flux_message_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://flux_user:flux_password@rabbitmq:5672
      - PORT=3005
      - USER_SERVICE_URL=http://user-service:3002
      - SERVER_SERVICE_URL=http://server-service:3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Realtime Service
  realtime-service:
    build:
      context: ./services/realtime-service
      dockerfile: Dockerfile
    container_name: flux-realtime-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://flux_user:flux_password@postgres:5432/flux_realtime_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://flux_user:flux_password@rabbitmq:5672
      - PORT=3006
      - MESSAGE_SERVICE_URL=http://message-service:3005
      - USER_SERVICE_URL=http://user-service:3002
      - SERVER_SERVICE_URL=http://server-service:3003
      - WEBSOCKET_CORS_ORIGIN=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Gateway API
  gateway-api:
    build:
      context: ./services/gateway-api
      dockerfile: Dockerfile
    container_name: flux-gateway-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - SERVER_SERVICE_URL=http://server-service:3003
      - MESSAGE_SERVICE_URL=http://message-service:3005
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=3000
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      server-service:
        condition: service_healthy
      message-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flux-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:

networks:
  flux-network:
    driver: bridge
