erDiagram
    %% SERVER & CHANNEL SERVICE (merged Server + Channel + Role services)
    SERVERS {
        uuid id PK
        varchar name "Server name"
        text description "Server description"
        text icon_url "Server icon URL"
        text banner_url "Server banner URL"
        text splash_url "Server splash image"
        uuid owner_id FK "References user_profiles.user_id"
        varchar invite_code UK "Unique invite code"
        boolean is_public "Public server discovery"
        integer max_members "Maximum member limit"
        enum verification_level "none|low|medium|high|highest"
        enum content_filter "disabled|members_without_roles|all_members"
        json features "Server boost features array"
        json emojis "Custom emoji definitions"
        timestamp created_at
        timestamp updated_at
        integer version "Optimistic locking"
        tsvector search_vector "Full-text search"
    }
    
    SERVER_MEMBERS {
        uuid id PK
        uuid server_id FK
        uuid user_id FK "References user_profiles.user_id"
        varchar username "Denormalized from user service"
        varchar display_name "Denormalized from user service"
        varchar nickname "Server-specific nickname"
        jsonb roles "Embedded role data array"
        jsonb permissions "Computed permissions cache"
        timestamp joined_at
        timestamp last_seen_at
    }
    
    CHANNELS {
        uuid id PK
        uuid server_id FK
        varchar name "Channel name"
        text topic "Channel topic/description"
        enum type "text|voice|category|announcement|stage|forum"
        uuid parent_id FK "Parent category (self-reference)"
        integer position "Channel order position"
        boolean is_private "Private channel access"
        boolean is_nsfw "Age-restricted content"
        integer slowmode_delay "Seconds between messages"
        integer user_limit "Voice channel user limit"
        integer bitrate "Voice channel bitrate"
        json permissions "Channel-specific permission overwrites"
        json settings "Additional channel settings"
        timestamp created_at
        timestamp updated_at
    }
    
    SERVER_ROLES {
        uuid id PK
        uuid server_id FK
        varchar name "Role name"
        varchar color "Hex color code"
        integer position "Role hierarchy position (higher = more powerful)"
        bigint permissions "Role permissions bitfield"
        boolean is_hoisted "Show separately in member list"
        boolean is_mentionable "Can be @mentioned"
        boolean is_managed "Managed by bot/integration"
        timestamp created_at
        timestamp updated_at
    }
    
    MEMBER_ROLES {
        uuid id PK
        uuid member_id FK "References server_members.id"
        uuid role_id FK "References server_roles.id"
        timestamp assigned_at
        uuid assigned_by FK "User who assigned role"
    }
    
    CHANNEL_MEMBERS {
        uuid id PK
        uuid channel_id FK
        uuid user_id FK
        timestamp last_read_at "Last message read timestamp"
        bigint permissions "User-specific channel permission overwrites"
        timestamp joined_at
        timestamp last_viewed_at
    }
    
    INVITES {
        uuid id PK
        varchar code UK "Invite code"
        uuid server_id FK
        uuid channel_id FK "Channel this invite points to"
        uuid creator_id FK "User who created invite"
        integer max_uses "0 = unlimited"
        integer current_uses "Current usage count"
        integer max_age "Seconds until expiry, 0 = never"
        boolean temporary "Grant temporary membership"
        timestamp created_at
        timestamp expires_at
    }
    
    %% Read Models
    SERVER_DIRECTORY {
        uuid id PK
        varchar name
        text description
        text icon_url
        boolean is_public
        integer member_count "Computed member count"
        integer channel_count "Computed channel count"
        tsvector search_vector
        timestamp created_at
    }
    
    USER_SERVERS {
        uuid user_id FK
        uuid server_id FK
        varchar name
        text icon_url
        jsonb roles
        jsonb permissions
        varchar nickname
        boolean is_owner "user_id = server.owner_id"
        timestamp last_seen_at
        integer unread_count "Computed from messages"
    }
    
    %% Relationships
    SERVERS ||--o{ SERVER_MEMBERS : "has"
    SERVERS ||--o{ CHANNELS : "contains"
    SERVERS ||--o{ SERVER_ROLES : "defines"
    SERVERS ||--o{ INVITES : "generates"
    CHANNELS ||--o{ CHANNEL_MEMBERS : "has"
    CHANNELS ||--o{ CHANNELS : "parent_child"
    CHANNELS ||--o{ INVITES : "targets"
    SERVER_MEMBERS ||--o{ MEMBER_ROLES : "assigned"
    SERVER_ROLES ||--o{ MEMBER_ROLES : "grants"
    
    %% Projections
    SERVERS ||--|| SERVER_DIRECTORY : "projected_to"
    SERVER_MEMBERS ||--|| USER_SERVERS : "projected_to"
    
    %% Indexes
    SERVERS {
        index idx_servers_owner "owner_id"
        index idx_servers_invite "invite_code"
        index idx_servers_public "is_public, created_at"
        index idx_servers_search "search_vector (GIN)"
    }
    
    SERVER_MEMBERS {
        unique_constraint server_user "server_id, user_id"
        index idx_members_server "server_id, joined_at"
        index idx_members_user "user_id"
        index idx_members_roles "roles (GIN)"
    }
    
    CHANNELS {
        index idx_channels_server "server_id, position"
        index idx_channels_parent "parent_id"
        index idx_channels_type "type, server_id"
    }
    
    SERVER_ROLES {
        unique_constraint server_name "server_id, name"
        index idx_roles_server_position "server_id, position desc"
        index idx_roles_mentionable "is_mentionable, server_id"
    }
    
    MEMBER_ROLES {
        unique_constraint member_role "member_id, role_id"
        index idx_member_roles_member "member_id"
        index idx_member_roles_role "role_id"
    }
    
    INVITES {
        index idx_invites_server "server_id, created_at"
        index idx_invites_creator "creator_id, created_at"
        index idx_invites_expires "expires_at"
        index idx_invites_active "expires_at, max_uses, current_uses"
    } 