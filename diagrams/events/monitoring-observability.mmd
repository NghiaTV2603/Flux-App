graph TB
    subgraph "Event Monitoring & Observability"
        
        subgraph "Metrics Collection"
            PUB_METRICS["üìä Publishing Metrics<br/>‚Ä¢ Events published/sec<br/>‚Ä¢ Publish success rate<br/>‚Ä¢ Publish latency<br/>‚Ä¢ Queue depth"]
            
            CONS_METRICS["üìà Consumption Metrics<br/>‚Ä¢ Events processed/sec<br/>‚Ä¢ Processing duration<br/>‚Ä¢ Success/failure rate<br/>‚Ä¢ Retry count"]
            
            SYS_METRICS["‚öôÔ∏è System Metrics<br/>‚Ä¢ RabbitMQ connection count<br/>‚Ä¢ Memory usage<br/>‚Ä¢ CPU utilization<br/>‚Ä¢ Network I/O"]
        end
        
        subgraph "Distributed Tracing"
            TRACE_ID["üîç Trace ID<br/>correlationId tracks<br/>event flow across services"]
            
            SPAN_DATA["üìù Span Data<br/>‚Ä¢ Service name<br/>‚Ä¢ Operation name<br/>‚Ä¢ Start/end time<br/>‚Ä¢ Tags & logs"]
            
            JAEGER["üï∏Ô∏è Jaeger/Zipkin<br/>‚Ä¢ Trace visualization<br/>‚Ä¢ Performance analysis<br/>‚Ä¢ Dependency mapping"]
        end
        
        subgraph "Logging Strategy"
            STRUCT_LOGS["üìã Structured Logging<br/>‚Ä¢ JSON format<br/>‚Ä¢ Consistent fields<br/>‚Ä¢ Log levels<br/>‚Ä¢ Correlation IDs"]
            
            EVENT_LOGS["üìÑ Event Logs<br/>‚Ä¢ Event published<br/>‚Ä¢ Event consumed<br/>‚Ä¢ Processing started/completed<br/>‚Ä¢ Errors & retries"]
            
            CENTRALIZED["üóÇÔ∏è Centralized Logging<br/>‚Ä¢ ELK Stack<br/>‚Ä¢ Log aggregation<br/>‚Ä¢ Search & filtering<br/>‚Ä¢ Dashboards"]
        end
        
        subgraph "Health Monitoring"
            HEALTH_CHECKS["üè• Health Checks<br/>‚Ä¢ RabbitMQ connectivity<br/>‚Ä¢ Database connections<br/>‚Ä¢ Service dependencies<br/>‚Ä¢ Queue status"]
            
            CIRCUIT_BREAKER["‚ö° Circuit Breaker<br/>‚Ä¢ Failure threshold<br/>‚Ä¢ Open/closed state<br/>‚Ä¢ Recovery time<br/>‚Ä¢ Fallback actions"]
            
            HEARTBEAT["üíì Heartbeat Events<br/>‚Ä¢ Service alive signals<br/>‚Ä¢ Performance metrics<br/>‚Ä¢ Resource usage<br/>‚Ä¢ Error rates"]
        end
        
        subgraph "Alerting Rules"
            ERROR_ALERTS["üö® Error Alerts<br/>‚Ä¢ High failure rate (>5%)<br/>‚Ä¢ Queue backup (>1000 msgs)<br/>‚Ä¢ Processing delays (>30s)<br/>‚Ä¢ Dead letter accumulation"]
            
            PERF_ALERTS["‚ö†Ô∏è Performance Alerts<br/>‚Ä¢ Slow processing (>10s avg)<br/>‚Ä¢ High memory usage (>80%)<br/>‚Ä¢ Connection pool exhaustion<br/>‚Ä¢ Disk space low"]
            
            BUS_ALERTS["üì¢ Business Alerts<br/>‚Ä¢ Critical event failures<br/>‚Ä¢ User-facing errors<br/>‚Ä¢ Data consistency issues<br/>‚Ä¢ Security violations"]
        end
        
        subgraph "Dashboard Views"
            REAL_TIME["üì∫ Real-time Dashboard<br/>‚Ä¢ Live event flow<br/>‚Ä¢ Current queue status<br/>‚Ä¢ Active connections<br/>‚Ä¢ Error rates"]
            
            HISTORICAL["üìä Historical Dashboard<br/>‚Ä¢ Event volume trends<br/>‚Ä¢ Performance metrics<br/>‚Ä¢ Error analysis<br/>‚Ä¢ Capacity planning"]
            
            SERVICE_MAP["üó∫Ô∏è Service Map<br/>‚Ä¢ Event flow visualization<br/>‚Ä¢ Service dependencies<br/>‚Ä¢ Bottleneck identification<br/>‚Ä¢ Impact analysis"]
        end
    end
    
    subgraph "Example Metrics & Alerts"
        subgraph "Prometheus Metrics"
            PROM_PUB["flux_events_published_total<br/>Labels: event_type, service, status"]
            PROM_PROC["flux_events_processing_duration_seconds<br/>Labels: event_type, service, handler"]
            PROM_RETRY["flux_events_retries_total<br/>Labels: event_type, retry_count"]
            PROM_QUEUE["flux_queue_depth<br/>Labels: queue_name, service"]
        end
        
        subgraph "Alert Examples"
            ALERT_1["High Error Rate<br/>flux_events_published_total{status='failure'} / <br/>flux_events_published_total > 0.05"]
            
            ALERT_2["Queue Backup<br/>flux_queue_depth > 1000"]
            
            ALERT_3["Slow Processing<br/>histogram_quantile(0.95, <br/>flux_events_processing_duration_seconds) > 10"]
        end
    end
    
    %% Metrics relationships
    PUB_METRICS --> PROM_PUB
    CONS_METRICS --> PROM_PROC
    CONS_METRICS --> PROM_RETRY
    SYS_METRICS --> PROM_QUEUE
    
    %% Tracing flow
    TRACE_ID --> SPAN_DATA
    SPAN_DATA --> JAEGER
    
    %% Logging flow
    STRUCT_LOGS --> EVENT_LOGS
    EVENT_LOGS --> CENTRALIZED
    
    %% Health monitoring
    HEALTH_CHECKS --> CIRCUIT_BREAKER
    CIRCUIT_BREAKER --> HEARTBEAT
    
    %% Alerting
    ERROR_ALERTS --> ALERT_1
    PERF_ALERTS --> ALERT_2
    PERF_ALERTS --> ALERT_3
    
    %% Dashboard connections
    REAL_TIME --> PROM_PUB
    REAL_TIME --> PROM_PROC
    HISTORICAL --> CENTRALIZED
    SERVICE_MAP --> JAEGER
    
    %% Cross-connections
    PROM_PUB --> ERROR_ALERTS
    PROM_QUEUE --> PERF_ALERTS
    HEARTBEAT --> BUS_ALERTS
    
    %% Styling
    classDef metricsClass fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef tracingClass fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef loggingClass fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef healthClass fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef alertClass fill:#ffebee,stroke:#d32f2f,stroke-width:2px
    classDef dashClass fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef exampleClass fill:#f5f5f5,stroke:#616161,stroke-width:2px
    
    class PUB_METRICS,CONS_METRICS,SYS_METRICS metricsClass
    class TRACE_ID,SPAN_DATA,JAEGER tracingClass
    class STRUCT_LOGS,EVENT_LOGS,CENTRALIZED loggingClass
    class HEALTH_CHECKS,CIRCUIT_BREAKER,HEARTBEAT healthClass
    class ERROR_ALERTS,PERF_ALERTS,BUS_ALERTS alertClass
    class REAL_TIME,HISTORICAL,SERVICE_MAP dashClass
    class PROM_PUB,PROM_PROC,PROM_RETRY,PROM_QUEUE,ALERT_1,ALERT_2,ALERT_3 exampleClass
