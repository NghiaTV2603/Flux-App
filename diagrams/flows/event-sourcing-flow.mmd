sequenceDiagram
    participant C as "Client"
    participant G as "Gateway API"
    participant S as "Service<br/>(Command)"
    participant DB as "Write Database"
    participant ES as "Event Store"
    participant MQ as "RabbitMQ"
    participant P as "Projection Service"
    participant RM as "Read Model"
    participant Cache as "Redis Cache"

    Note over C,Cache: Command Flow (Write Side)
    
    C->>+G: POST /api/users/profile<br/>{displayName, bio}
    Note over G: JWT Validation<br/>Rate Limiting
    
    G->>+S: Update user profile command
    Note over S: Business Logic<br/>Validation
    
    S->>+DB: BEGIN TRANSACTION
    S->>DB: UPDATE user_profiles<br/>SET display_name, bio
    S->>DB: INSERT INTO events<br/>(UserProfileUpdated)
    S->>-DB: COMMIT TRANSACTION
    
    Note over S,ES: Event Publishing
    S->>+ES: Store domain event<br/>{UserProfileUpdated}
    ES->>+MQ: Publish event to exchange<br/>routing_key: user.profile.updated
    
    Note over MQ,RM: Async Projection Updates
    MQ->>+P: Deliver event to projection service
    
    par Update User Directory
        P->>RM: UPDATE user_directory<br/>SET display_name, bio
    and Update User Cache
        P->>Cache: SET user:{userId}<br/>{updated profile data}
    and Update Server Members
        P->>RM: UPDATE server_members<br/>SET display_name (denormalized)
    end
    
    P->>-MQ: ACK all updates processed
    MQ->>-ES: Confirm event processed
    ES->>-S: Event stored and projected
    
    S-->>-G: 200 OK {updatedProfile}
    G-->>-C: Profile updated successfully
    
    Note over C,Cache: Query Flow (Read Side)
    
    C->>+G: GET /api/users/search?q=username
    G->>+RM: Query user_directory<br/>WHERE search_vector @@ 'username'
    
    alt Cache Hit
        RM->>Cache: GET search:username
        Cache-->>RM: Cached results
    else Cache Miss
        RM->>RM: Execute full-text search
        RM->>Cache: SET search:username<br/>TTL: 5 minutes
    end
    
    RM-->>-G: Search results
    G-->>-C: User search results
    
    Note over C,Cache: Event Replay (Recovery)
    
    Note over ES: System Recovery<br/>Rebuild Read Models
    ES->>+P: Replay all events<br/>FROM event_store<br/>ORDER BY occurred_at
    
    loop For Each Event
        P->>RM: Apply event to read model
        Note over P: Idempotent operations<br/>Handle duplicates
    end
    
    P->>Cache: Clear stale cache
    P->>-ES: Replay completed
    
    Note over C,Cache: CQRS Benefits Highlighted
    rect rgb(255, 240, 240)
        Note over S,DB: Write Side Optimized<br/>- Fast writes<br/>- Strong consistency<br/>- Business logic focus
    end
    
    rect rgb(240, 255, 240)
        Note over RM,Cache: Read Side Optimized<br/>- Fast queries<br/>- Denormalized data<br/>- Multiple read models
    end
    
    rect rgb(240, 240, 255)
        Note over ES,MQ: Event-Driven Architecture<br/>- Audit trail<br/>- Eventual consistency<br/>- Scalable projections
    end 