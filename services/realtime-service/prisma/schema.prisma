// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConnectionStatus {
  online
  offline
  away
  busy
}

enum PresenceType {
  user
  bot
}

// User Connections (WebSocket Sessions)
model UserConnection {
  id           String           @id @default(uuid())
  userId       String           @map("user_id") // References user_profiles.user_id
  socketId     String           @unique @map("socket_id") // Socket.IO connection ID
  status       ConnectionStatus @default(online)
  userAgent    String?          @map("user_agent") // Browser/device info
  ipAddress    String?          @map("ip_address")
  platform     String?          // web, mobile, desktop
  
  // Connection metadata
  connectedAt  DateTime         @default(now()) @map("connected_at")
  lastActivity DateTime         @default(now()) @map("last_activity")
  disconnectedAt DateTime?      @map("disconnected_at")
  
  // Channel subscriptions
  channelSubscriptions ChannelSubscription[]
  
  @@index([userId, status])
  @@index([socketId])
  @@index([lastActivity])
  @@map("user_connections")
}

// Channel Subscriptions (Users in channels)
model ChannelSubscription {
  id           String         @id @default(uuid())
  connectionId String         @map("connection_id")
  channelId    String         @map("channel_id") // References channels from server-service
  serverId     String         @map("server_id") // References servers from server-service
  userId       String         @map("user_id") // Denormalized for easier queries
  
  // Subscription metadata
  joinedAt     DateTime       @default(now()) @map("joined_at")
  lastRead     DateTime?      @map("last_read") // Last read message timestamp
  
  // Relations
  connection   UserConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  
  @@unique([connectionId, channelId])
  @@index([channelId])
  @@index([serverId])
  @@index([userId])
  @@map("channel_subscriptions")
}

// User Presence (Online status, custom status)
model UserPresence {
  id           String        @id @default(uuid())
  userId       String        @unique @map("user_id") // References user_profiles.user_id
  status       ConnectionStatus @default(offline)
  customStatus String?       @map("custom_status") // Custom status message
  type         PresenceType  @default(user)
  
  // Activity tracking
  lastSeen     DateTime      @default(now()) @map("last_seen")
  isOnline     Boolean       @default(false) @map("is_online")
  
  // Client info
  activeClients Int          @default(0) @map("active_clients") // Number of active connections
  
  // Timestamps
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  
  @@index([status, isOnline])
  @@index([lastSeen])
  @@map("user_presence")
}

// Typing Indicators
model TypingIndicator {
  id        String   @id @default(uuid())
  userId    String   @map("user_id") // References user_profiles.user_id
  channelId String   @map("channel_id") // References channels from server-service
  serverId  String?  @map("server_id") // References servers from server-service (null for DMs)
  
  // Typing state
  isTyping  Boolean  @default(true) @map("is_typing")
  startedAt DateTime @default(now()) @map("started_at")
  expiresAt DateTime @map("expires_at") // Auto-expire after 5 seconds
  
  @@unique([userId, channelId])
  @@index([channelId, expiresAt])
  @@index([expiresAt]) // For cleanup expired indicators
  @@map("typing_indicators")
}

// Direct Message Rooms (for DM real-time)
model DMRoom {
  id           String   @id @default(uuid())
  user1Id      String   @map("user1_id") // Always the smaller user ID
  user2Id      String   @map("user2_id") // Always the larger user ID
  roomId       String   @unique @map("room_id") // Generated room ID for Socket.IO
  
  // Activity
  lastActivity DateTime @default(now()) @map("last_activity")
  isActive     Boolean  @default(true) @map("is_active")
  
  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([roomId])
  @@map("dm_rooms")
}

// Real-time Events Log (for debugging and monitoring)
model RealtimeEvent {
  id          String   @id @default(uuid())
  eventType   String   @map("event_type") // message:new, user:join, etc.
  userId      String?  @map("user_id")
  channelId   String?  @map("channel_id")
  serverId    String?  @map("server_id")
  socketId    String?  @map("socket_id")
  
  // Event data
  payload     Json?    // Event payload
  success     Boolean  @default(true)
  errorMessage String? @map("error_message")
  
  // Performance metrics
  processingTime Int?  @map("processing_time") // milliseconds
  recipientCount Int?  @map("recipient_count") // number of recipients
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@index([eventType, createdAt])
  @@index([userId, createdAt])
  @@index([channelId, createdAt])
  @@index([createdAt]) // For cleanup old events
  @@map("realtime_events")
}

// WebSocket Rooms (for Socket.IO room management)
model SocketRoom {
  id          String   @id @default(uuid())
  roomName    String   @unique @map("room_name") // channel:uuid, user:uuid, server:uuid
  roomType    String   @map("room_type") // channel, dm, server
  referenceId String   @map("reference_id") // channelId, userId, serverId
  
  // Room metadata
  memberCount Int      @default(0) @map("member_count")
  isActive    Boolean  @default(true) @map("is_active")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@index([roomType, referenceId])
  @@index([roomName])
  @@map("socket_rooms")
}

// Connection Analytics (optional - for monitoring)
model ConnectionAnalytics {
  id             String   @id @default(uuid())
  date           DateTime @map("date") // Daily aggregation
  
  // Connection metrics
  totalConnections     Int @default(0) @map("total_connections")
  uniqueUsers          Int @default(0) @map("unique_users")
  peakConnections      Int @default(0) @map("peak_connections")
  avgConnectionTime    Int @default(0) @map("avg_connection_time") // minutes
  
  // Event metrics
  messagesDelivered    Int @default(0) @map("messages_delivered")
  eventsFailed         Int @default(0) @map("events_failed")
  avgDeliveryTime      Int @default(0) @map("avg_delivery_time") // milliseconds
  
  // Timestamps
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  @@unique([date])
  @@index([date])
  @@map("connection_analytics")
}