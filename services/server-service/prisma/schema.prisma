// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  text
  voice
  category
  announcement
  stage
  forum
}

enum RoleType {
  owner
  admin
  member
  custom
}

enum VerificationLevel {
  none
  low
  medium
  high
  highest
}

enum ContentFilter {
  disabled
  members_without_roles
  all_members
}

model Server {
  id                String            @id @default(uuid())
  name              String            // Server name
  description       String?           // Server description
  iconUrl           String?           @map("icon_url") // Server icon URL
  bannerUrl         String?           @map("banner_url") // Server banner URL
  splashUrl         String?           @map("splash_url") // Server splash image
  ownerId           String            @map("owner_id") // References user_profiles.user_id
  inviteCode        String            @unique @map("invite_code") // Unique invite code
  isPublic          Boolean           @default(false) @map("is_public") // Public server discovery
  maxMembers        Int               @default(100) @map("max_members") // Maximum member limit
  verificationLevel VerificationLevel @default(none) @map("verification_level") // none|low|medium|high|highest
  contentFilter     ContentFilter     @default(disabled) @map("content_filter") // disabled|members_without_roles|all_members
  features          Json?             // Server boost features array
  emojis            Json?             // Custom emoji definitions
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  version           Int               @default(0) // Optimistic locking

  // Relations
  members  ServerMember[]
  channels Channel[]
  roles    ServerRole[]
  invites  Invite[]

  @@index([ownerId])
  @@index([inviteCode])
  @@index([isPublic, createdAt])
  @@map("servers")
}

model ServerMember {
  id          String   @id @default(uuid())
  serverId    String   @map("server_id")
  userId      String   @map("user_id") // References user_profiles.user_id
  username    String   // Denormalized from user service
  displayName String?  @map("display_name") // Denormalized from user service
  nickname    String?  // Server-specific nickname
  roles       Json?    // Embedded role data array
  permissions Json?    // Computed permissions cache
  joinedAt    DateTime @default(now()) @map("joined_at")
  lastSeenAt  DateTime @default(now()) @map("last_seen_at")

  // Relations
  server      Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  memberRoles MemberRole[]

  @@unique([serverId, userId])
  @@index([serverId, joinedAt])
  @@index([userId])
  @@index([roles])
  @@map("server_members")
}

model Channel {
  id           String      @id @default(uuid())
  serverId     String      @map("server_id")
  name         String      // Channel name
  topic        String?     // Channel topic/description
  type         ChannelType @default(text) // text|voice|category|announcement|stage|forum
  parentId     String?     @map("parent_id") // Parent category (self-reference)
  position     Int         @default(0) // Channel order position
  isPrivate    Boolean     @default(false) @map("is_private") // Private channel access
  isNsfw       Boolean     @default(false) @map("is_nsfw") // Age-restricted content
  slowmodeDelay Int        @default(0) @map("slowmode_delay") // Seconds between messages
  userLimit    Int?        @map("user_limit") // Voice channel user limit
  bitrate      Int?        // Voice channel bitrate
  permissions  Json?       // Channel-specific permission overwrites
  settings     Json?       // Additional channel settings
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  server         Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  parent         Channel?        @relation("ChannelParent", fields: [parentId], references: [id])
  children       Channel[]       @relation("ChannelParent")
  channelMembers ChannelMember[]
  invites        Invite[]

  @@index([serverId, position])
  @@index([parentId])
  @@index([type, serverId])
  @@map("channels")
}

model ServerRole {
  id            String   @id @default(uuid())
  serverId      String   @map("server_id")
  name          String   // Role name
  type          RoleType @default(custom) // Role type (owner, admin, member, custom)
  color         String?  // Hex color code
  position      Int      @default(0) // Role hierarchy position (higher = more powerful)
  permissions   BigInt   @default(0) // Role permissions bitfield
  isHoisted     Boolean  @default(false) @map("is_hoisted") // Show separately in member list
  isMentionable Boolean  @default(true) @map("is_mentionable") // Can be @mentioned
  isManaged     Boolean  @default(false) @map("is_managed") // Managed by bot/integration
  isDefault     Boolean  @default(false) @map("is_default") // Default role for new members
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  server      Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  memberRoles MemberRole[]

  @@unique([serverId, name])
  @@unique([serverId, type]) // Only one role per type per server
  @@index([serverId, position])
  @@index([isMentionable, serverId])
  @@index([type, serverId])
  @@map("server_roles")
}

model MemberRole {
  id         String   @id @default(uuid())
  memberId   String   @map("member_id") // References server_members.id
  roleId     String   @map("role_id") // References server_roles.id
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by") // User who assigned role

  // Relations
  member ServerMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  role   ServerRole   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([memberId, roleId])
  @@index([memberId])
  @@index([roleId])
  @@map("member_roles")
}

model ChannelMember {
  id           String    @id @default(uuid())
  channelId    String    @map("channel_id")
  userId       String    @map("user_id")
  lastReadAt   DateTime? @map("last_read_at") // Last message read timestamp
  permissions  BigInt?   // User-specific channel permission overwrites
  joinedAt     DateTime  @default(now()) @map("joined_at")
  lastViewedAt DateTime  @default(now()) @map("last_viewed_at")

  // Relations
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("channel_members")
}

model Invite {
  id          String    @id @default(uuid())
  code        String    @unique // Invite code
  serverId    String    @map("server_id")
  channelId   String?   @map("channel_id") // Channel this invite points to
  creatorId   String    @map("creator_id") // User who created invite
  maxUses     Int       @default(0) @map("max_uses") // 0 = unlimited
  currentUses Int       @default(0) @map("current_uses") // Current usage count
  maxAge      Int       @default(0) @map("max_age") // Seconds until expiry, 0 = never
  temporary   Boolean   @default(false) // Grant temporary membership
  createdAt   DateTime  @default(now()) @map("created_at")
  expiresAt   DateTime? @map("expires_at")

  // Relations
  server  Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([serverId, createdAt])
  @@index([creatorId, createdAt])
  @@index([expiresAt])
  @@index([expiresAt, maxUses, currentUses])
  @@map("invites")
}

// Read Models (Materialized Views - can be implemented later)
model ServerDirectory {
  id           String   @id
  name         String
  description  String?
  iconUrl      String?  @map("icon_url")
  isPublic     Boolean  @map("is_public")
  memberCount  Int      @default(0) @map("member_count") // Computed member count
  channelCount Int      @default(0) @map("channel_count") // Computed channel count
  createdAt    DateTime @map("created_at")

  @@index([isPublic, createdAt])
  @@map("server_directory")
}

model UserServer {
  userId        String   @map("user_id")
  serverId      String   @map("server_id")
  name          String
  iconUrl       String?  @map("icon_url")
  roles         Json?
  permissions   Json?
  nickname      String?
  isOwner       Boolean  @default(false) @map("is_owner") // user_id = server.owner_id
  lastSeenAt    DateTime @default(now()) @map("last_seen_at")
  unreadCount   Int      @default(0) @map("unread_count") // Computed from messages

  @@id([userId, serverId])
  @@map("user_servers")
}
