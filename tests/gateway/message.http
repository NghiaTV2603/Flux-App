### üí¨ Message Service - Gateway API Tests
### Routes through API Gateway to Message Service (Port 3005)

### Import shared variables
@baseUrl = http://localhost:3000/api
@testEmail = demarco1@gmail.com
@testUsername = demarco1
@testPassword = demarco1
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhMzM3ZDkwMi02NDI4LTQ4MDItYWQyNS1jNjE5NjRhOTQzYWUiLCJpYXQiOjE3NTYwMDg3MDYsImV4cCI6MTc1NjAxMjMwNn0.rOwRcJZdTVBMV8rZr6VQGxPWzPmSA9GTr6C_NXLF8bA
@refreshToken = f2297d080f5a3091e09643c7e7f26636aedacf8680ed029f6072c407f4c2145670f7f6f253a68b1868973c7a0274d6c6d48e4d3de1205395393f67f475145c28
@testUserId = a337d902-6428-4802-ad25-c61964a943ae
@serverId = a323b194-87b8-4f87-93bb-967e03b7bc98
@channelId = paste-channel-id-here
@roleId = paste-role-id-here
@messageId = paste-message-id-here
@fileId = paste-file-id-here
@friendshipId = paste-friendship-id-here
@notificationId = paste-notification-id-here
@testUser2Id = paste-test-user-2-id-here
@testUser3Id = paste-test-user-3-id-here
@testImageUrl = https://example.com/test-image.jpg
@testAvatarUrl = https://example.com/test-avatar.jpg
### ============= CHANNEL MESSAGING =============

### 1. Send Message to Channel
# @name sendChannelMessage
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Hello from Gateway API! üöÄ Testing channel messages",
  "contentType": "text"
}

### 2. Send Message with Embed
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Check out this embed!",
  "contentType": "embed",
  "embeds": [
    {
      "type": "rich",
      "title": "Gateway API Test",
      "description": "Testing embed functionality",
      "url": "https://example.com",
      "fields": {
        "status": "Testing",
        "priority": "High"
      }
    }
  ]
}

### 3. Send Message with Attachments
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Message with file attachment",
  "contentType": "file",
  "attachments": [
    {
      "id": "attachment-1",
      "name": "test-image.jpg",
      "url": "{{testImageUrl}}",
      "size": 12345,
      "type": "image/jpeg",
      "thumbnail": "{{testImageThumbnailUrl}}"
    }
  ]
}

### 4. Send Message with Mentions
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Hey @testuser, check this out!",
  "contentType": "text",
  "mentions": [
    {
      "type": "user",
      "id": "{{testUserId}}",
      "username": "testuser"
    }
  ]
}

### 5. Get Channel Messages
GET {{baseUrl}}/channels/{{channelId}}/messages?limit=20&before={{messageId}}
Authorization: Bearer {{accessToken}}

### 6. Get Channel Messages (After specific message)
GET {{baseUrl}}/channels/{{channelId}}/messages?limit=10&after={{messageId}}
Authorization: Bearer {{accessToken}}

### 7. Get Channel Messages with Filters
GET {{baseUrl}}/channels/{{channelId}}/messages?limit=10&authorId={{testUserId}}&contentType=text&hasAttachments=true
Authorization: Bearer {{accessToken}}

### 8. Update Message
PUT {{baseUrl}}/messages/{{messageId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Updated message via Gateway API! ‚ú® Edit test successful",
  "reason": "Fixed typo"
}

### 9. Delete Message
DELETE {{baseUrl}}/messages/{{messageId}}
Authorization: Bearer {{accessToken}}

### ============= MESSAGE REACTIONS =============

### 10. Add Reaction to Message
POST {{baseUrl}}/messages/{{messageId}}/reactions
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "emoji": "üëç"
}

### 11. Add Custom Emoji Reaction
POST {{baseUrl}}/messages/{{messageId}}/reactions
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "emoji": "custom_emoji",
  "emojiId": "12345",
  "animated": true
}

### 12. Remove Reaction
DELETE {{baseUrl}}/messages/{{messageId}}/reactions/üëç
Authorization: Bearer {{accessToken}}

### 13. Remove Custom Emoji Reaction
DELETE {{baseUrl}}/messages/{{messageId}}/reactions/custom_emoji
Authorization: Bearer {{accessToken}}

### ============= DIRECT MESSAGING =============

### 14. Send Direct Message
# @name sendDM
POST {{baseUrl}}/conversations/{{conversationId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Direct message via Gateway API! üí¨ Testing DM functionality",
  "contentType": "text",
  "participants": ["{{testUserId}}", "{{testUser2Id}}"]
}

### 15. Send DM with Attachments
POST {{baseUrl}}/conversations/{{conversationId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "DM with image attachment",
  "contentType": "file",
  "participants": ["{{testUserId}}", "{{testUser2Id}}"],
  "attachments": [
    {
      "id": "dm-attachment-1",
      "name": "dm-image.jpg",
      "url": "{{testImageUrl}}",
      "size": 54321,
      "type": "image/jpeg"
    }
  ]
}

### 16. Get DM Conversation
GET {{baseUrl}}/conversations/{{conversationId}}/messages?limit=20
Authorization: Bearer {{accessToken}}

### 17. Get DM Conversation History
GET {{baseUrl}}/conversations/{{conversationId}}/messages?limit=10&before={{messageId}}
Authorization: Bearer {{accessToken}}

### ============= MESSAGE SEARCH =============

### 18. Search Messages in Channel
GET {{baseUrl}}/channels/{{channelId}}/search?search=gateway&limit=10
Authorization: Bearer {{accessToken}}

### 19. Search Messages in Conversation
GET {{baseUrl}}/conversations/{{conversationId}}/search?search=test&limit=20
Authorization: Bearer {{accessToken}}

### 20. Search with Content Type Filter
GET {{baseUrl}}/channels/{{channelId}}/search?search=hello&contentType=text&limit=15
Authorization: Bearer {{accessToken}}

### 21. Search with Author Filter
GET {{baseUrl}}/channels/{{channelId}}/search?search=api&authorId={{testUserId}}&limit=10
Authorization: Bearer {{accessToken}}

### 22. Search with Attachment Filter
GET {{baseUrl}}/channels/{{channelId}}/search?search=image&hasAttachments=true&limit=10
Authorization: Bearer {{accessToken}}

### ============= REPLY & THREADING =============

### 23. Reply to Message
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "This is a reply to the previous message",
  "contentType": "text",
  "replyTo": "{{messageId}}"
}

### 24. Send Message to Thread
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Message in thread via Gateway API! üßµ",
  "contentType": "text",
  "threadId": "{{threadId}}"
}

### ============= SPECIAL MESSAGE TYPES =============

### 25. Send TTS Message
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "This is a text-to-speech message",
  "contentType": "text",
  "isTts": true
}

### 26. Send Silent Message
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Silent message - no notification",
  "contentType": "text",
  "silent": true
}

### 27. Send Sticker Message
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "",
  "contentType": "sticker",
  "stickers": ["sticker-id-1", "sticker-id-2"]
}

### ============= ERROR TESTING =============

### 28. Test Send Message to Invalid Channel
POST {{baseUrl}}/channels/invalid-channel-id/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "This should fail",
  "contentType": "text"
}

### 29. Test Message Too Long
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "a".repeat(2001),
  "contentType": "text"
}

### 30. Test Invalid Content Type
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Test message",
  "contentType": "invalid_type"
}

### 31. Test Missing Content
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "contentType": "text"
}

### 32. Test Invalid Mention
POST {{baseUrl}}/channels/{{channelId}}/messages
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "content": "Invalid mention test",
  "contentType": "text",
  "mentions": [
    {
      "type": "invalid_type",
      "id": "invalid-id"
    }
  ]
}

### ============= TESTING NOTES =============

### üìù Prerequisites:
# 1. Must have valid accessToken from auth.http
# 2. Need channelId from server-channel.http
# 3. Need conversationId for DM testing
# 4. Update @messageId after sending messages
# 5. Update @threadId when testing threading

### üîß API Endpoints Available:
# ‚úÖ POST /channels/:channelId/messages - Send channel message
# ‚úÖ GET /channels/:channelId/messages - Get channel messages
# ‚úÖ POST /conversations/:conversationId/messages - Send DM
# ‚úÖ GET /conversations/:conversationId/messages - Get DM messages
# ‚úÖ PUT /messages/:messageId - Update message
# ‚úÖ DELETE /messages/:messageId - Delete message
# ‚úÖ POST /messages/:messageId/reactions - Add reaction
# ‚úÖ DELETE /messages/:messageId/reactions/:emoji - Remove reaction
# ‚úÖ GET /channels/:channelId/search - Search channel messages
# ‚úÖ GET /conversations/:conversationId/search - Search DM messages

### ‚ùå API Endpoints NOT Yet Implemented:
# - GET /messages/:messageId - Get single message
# - POST/DELETE /messages/:messageId/pin - Pin/unpin messages
# - Thread-specific endpoints
# - Bulk message operations
# - Message read status endpoints
# - Advanced search endpoints

### üéØ Message Fields Available:
# - content (required, max 2000 chars)
# - contentType (text, embed, system, call, file, sticker, poll)
# - attachments (array of file objects)
# - embeds (array of embed objects)
# - stickers (array of sticker IDs)
# - mentions (array of mention objects)
# - replyTo (message ID for replies)
# - threadId (thread ID for threaded messages)
# - isTts (boolean for text-to-speech)
# - silent (boolean for silent messages)

### üö® Important Notes:
# - Message Service runs on port 3005
# - All requests should go through Gateway API
# - Authentication required for all endpoints
# - messageType is automatically set by endpoint
# - channelId/conversationId is extracted from URL
# - User info is extracted from JWT token